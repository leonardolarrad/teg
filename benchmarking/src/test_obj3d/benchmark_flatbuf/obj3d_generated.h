// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_FLATBUF_OBJ3D_H_
#define FLATBUFFERS_GENERATED_SCHEMA_FLATBUF_OBJ3D_H_

#include "flatbuffers/flatbuffers.h"

namespace flatbuf {
namespace obj3d {

struct IVec3;

struct FVec3;

struct Face;

struct Obj3D;
struct Obj3DBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) IVec3 FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t x_;
  int64_t y_;
  int64_t z_;

 public:
  IVec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  IVec3(int64_t _x, int64_t _y, int64_t _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  int64_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int64_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  int64_t z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(IVec3, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) FVec3 FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  FVec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  FVec3(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(FVec3, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Face FLATBUFFERS_FINAL_CLASS {
 private:
  flatbuf::obj3d::IVec3 vertex_index_;
  flatbuf::obj3d::IVec3 normal_index_;

 public:
  Face()
      : vertex_index_(),
        normal_index_() {
  }
  Face(const flatbuf::obj3d::IVec3 &_vertex_index, const flatbuf::obj3d::IVec3 &_normal_index)
      : vertex_index_(_vertex_index),
        normal_index_(_normal_index) {
  }
  const flatbuf::obj3d::IVec3 &vertex_index() const {
    return vertex_index_;
  }
  const flatbuf::obj3d::IVec3 &normal_index() const {
    return normal_index_;
  }
};
FLATBUFFERS_STRUCT_END(Face, 48);

struct Obj3D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Obj3DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_NORMALS = 6,
    VT_FACES = 8
  };
  const flatbuffers::Vector<const flatbuf::obj3d::FVec3 *> *vertices() const {
    return GetPointer<const flatbuffers::Vector<const flatbuf::obj3d::FVec3 *> *>(VT_VERTICES);
  }
  const flatbuffers::Vector<const flatbuf::obj3d::FVec3 *> *normals() const {
    return GetPointer<const flatbuffers::Vector<const flatbuf::obj3d::FVec3 *> *>(VT_NORMALS);
  }
  const flatbuffers::Vector<const flatbuf::obj3d::Face *> *faces() const {
    return GetPointer<const flatbuffers::Vector<const flatbuf::obj3d::Face *> *>(VT_FACES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.VerifyVector(normals()) &&
           VerifyOffset(verifier, VT_FACES) &&
           verifier.VerifyVector(faces()) &&
           verifier.EndTable();
  }
};

struct Obj3DBuilder {
  typedef Obj3D Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vertices(flatbuffers::Offset<flatbuffers::Vector<const flatbuf::obj3d::FVec3 *>> vertices) {
    fbb_.AddOffset(Obj3D::VT_VERTICES, vertices);
  }
  void add_normals(flatbuffers::Offset<flatbuffers::Vector<const flatbuf::obj3d::FVec3 *>> normals) {
    fbb_.AddOffset(Obj3D::VT_NORMALS, normals);
  }
  void add_faces(flatbuffers::Offset<flatbuffers::Vector<const flatbuf::obj3d::Face *>> faces) {
    fbb_.AddOffset(Obj3D::VT_FACES, faces);
  }
  explicit Obj3DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Obj3D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Obj3D>(end);
    return o;
  }
};

inline flatbuffers::Offset<Obj3D> CreateObj3D(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const flatbuf::obj3d::FVec3 *>> vertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<const flatbuf::obj3d::FVec3 *>> normals = 0,
    flatbuffers::Offset<flatbuffers::Vector<const flatbuf::obj3d::Face *>> faces = 0) {
  Obj3DBuilder builder_(_fbb);
  builder_.add_faces(faces);
  builder_.add_normals(normals);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline flatbuffers::Offset<Obj3D> CreateObj3DDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuf::obj3d::FVec3> *vertices = nullptr,
    const std::vector<flatbuf::obj3d::FVec3> *normals = nullptr,
    const std::vector<flatbuf::obj3d::Face> *faces = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<flatbuf::obj3d::FVec3>(*vertices) : 0;
  auto normals__ = normals ? _fbb.CreateVectorOfStructs<flatbuf::obj3d::FVec3>(*normals) : 0;
  auto faces__ = faces ? _fbb.CreateVectorOfStructs<flatbuf::obj3d::Face>(*faces) : 0;
  return flatbuf::obj3d::CreateObj3D(
      _fbb,
      vertices__,
      normals__,
      faces__);
}

inline const flatbuf::obj3d::Obj3D *GetObj3D(const void *buf) {
  return flatbuffers::GetRoot<flatbuf::obj3d::Obj3D>(buf);
}

inline const flatbuf::obj3d::Obj3D *GetSizePrefixedObj3D(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flatbuf::obj3d::Obj3D>(buf);
}

inline bool VerifyObj3DBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuf::obj3d::Obj3D>(nullptr);
}

inline bool VerifySizePrefixedObj3DBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuf::obj3d::Obj3D>(nullptr);
}

inline void FinishObj3DBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flatbuf::obj3d::Obj3D> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedObj3DBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flatbuf::obj3d::Obj3D> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace obj3d
}  // namespace flatbuf

#endif  // FLATBUFFERS_GENERATED_SCHEMA_FLATBUF_OBJ3D_H_

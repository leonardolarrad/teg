// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obj3d.proto

#include "obj3d.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {
namespace obj3d {

inline constexpr IVec3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{::int64_t{0}},
        y_{::int64_t{0}},
        z_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IVec3::IVec3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IVec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IVec3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IVec3DefaultTypeInternal() {}
  union {
    IVec3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IVec3DefaultTypeInternal _IVec3_default_instance_;

inline constexpr FVec3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FVec3::FVec3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FVec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FVec3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FVec3DefaultTypeInternal() {}
  union {
    FVec3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FVec3DefaultTypeInternal _FVec3_default_instance_;

inline constexpr Face::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vertice_index_{nullptr},
        normal_index_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Face::Face(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceDefaultTypeInternal() {}
  union {
    Face _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceDefaultTypeInternal _Face_default_instance_;

inline constexpr Obj3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vertices_{},
        normals_{},
        faces_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Obj3D::Obj3D(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Obj3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Obj3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Obj3DDefaultTypeInternal() {}
  union {
    Obj3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Obj3DDefaultTypeInternal _Obj3D_default_instance_;
}  // namespace obj3d
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_obj3d_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_obj3d_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_obj3d_2eproto = nullptr;
const ::uint32_t TableStruct_obj3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::IVec3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::IVec3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::IVec3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::IVec3, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::FVec3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::FVec3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::FVec3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::FVec3, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Face, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Face, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Face, _impl_.vertice_index_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Face, _impl_.normal_index_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Obj3D, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Obj3D, _impl_.vertices_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Obj3D, _impl_.normals_),
    PROTOBUF_FIELD_OFFSET(::protobuf::obj3d::Obj3D, _impl_.faces_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::protobuf::obj3d::IVec3)},
        {11, -1, -1, sizeof(::protobuf::obj3d::FVec3)},
        {22, 32, -1, sizeof(::protobuf::obj3d::Face)},
        {34, -1, -1, sizeof(::protobuf::obj3d::Obj3D)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::obj3d::_IVec3_default_instance_._instance,
    &::protobuf::obj3d::_FVec3_default_instance_._instance,
    &::protobuf::obj3d::_Face_default_instance_._instance,
    &::protobuf::obj3d::_Obj3D_default_instance_._instance,
};
const char descriptor_table_protodef_obj3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013obj3d.proto\022\016protobuf.obj3d\"(\n\005IVec3\022\t"
    "\n\001x\030\001 \001(\003\022\t\n\001y\030\002 \001(\003\022\t\n\001z\030\003 \001(\003\"(\n\005FVec3"
    "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"a\n\004Fac"
    "e\022,\n\rvertice_index\030\001 \001(\0132\025.protobuf.obj3"
    "d.IVec3\022+\n\014normal_index\030\002 \001(\0132\025.protobuf"
    ".obj3d.IVec3\"}\n\005Obj3D\022\'\n\010vertices\030\001 \003(\0132"
    "\025.protobuf.obj3d.FVec3\022&\n\007normals\030\002 \003(\0132"
    "\025.protobuf.obj3d.FVec3\022#\n\005faces\030\003 \003(\0132\024."
    "protobuf.obj3d.Faceb\006proto3"
};
static ::absl::once_flag descriptor_table_obj3d_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_obj3d_2eproto = {
    false,
    false,
    347,
    descriptor_table_protodef_obj3d_2eproto,
    "obj3d.proto",
    &descriptor_table_obj3d_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_obj3d_2eproto::offsets,
    file_level_metadata_obj3d_2eproto,
    file_level_enum_descriptors_obj3d_2eproto,
    file_level_service_descriptors_obj3d_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_obj3d_2eproto_getter() {
  return &descriptor_table_obj3d_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_obj3d_2eproto(&descriptor_table_obj3d_2eproto);
namespace protobuf {
namespace obj3d {
// ===================================================================

class IVec3::_Internal {
 public:
};

IVec3::IVec3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.obj3d.IVec3)
}
IVec3::IVec3(
    ::google::protobuf::Arena* arena, const IVec3& from)
    : IVec3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IVec3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IVec3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
IVec3::~IVec3() {
  // @@protoc_insertion_point(destructor:protobuf.obj3d.IVec3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IVec3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IVec3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.obj3d.IVec3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IVec3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> IVec3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IVec3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IVec3, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IVec3, _impl_.x_)}},
    // int64 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IVec3, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(IVec3, _impl_.y_)}},
    // int64 z = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IVec3, _impl_.z_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(IVec3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 x = 1;
    {PROTOBUF_FIELD_OFFSET(IVec3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 y = 2;
    {PROTOBUF_FIELD_OFFSET(IVec3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 z = 3;
    {PROTOBUF_FIELD_OFFSET(IVec3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* IVec3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.obj3d.IVec3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int64 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  // int64 z = 3;
  if (this->_internal_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.obj3d.IVec3)
  return target;
}

::size_t IVec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.obj3d.IVec3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_x());
  }

  // int64 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_y());
  }

  // int64 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IVec3::_class_data_ = {
    IVec3::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IVec3::GetClassData() const {
  return &_class_data_;
}

void IVec3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IVec3*>(&to_msg);
  auto& from = static_cast<const IVec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.obj3d.IVec3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IVec3::CopyFrom(const IVec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.obj3d.IVec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IVec3::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IVec3::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IVec3::InternalSwap(IVec3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IVec3, _impl_.z_)
      + sizeof(IVec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(IVec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata IVec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obj3d_2eproto_getter, &descriptor_table_obj3d_2eproto_once,
      file_level_metadata_obj3d_2eproto[0]);
}
// ===================================================================

class FVec3::_Internal {
 public:
};

FVec3::FVec3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.obj3d.FVec3)
}
FVec3::FVec3(
    ::google::protobuf::Arena* arena, const FVec3& from)
    : FVec3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FVec3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FVec3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
FVec3::~FVec3() {
  // @@protoc_insertion_point(destructor:protobuf.obj3d.FVec3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FVec3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FVec3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.obj3d.FVec3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FVec3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> FVec3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FVec3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(FVec3, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(FVec3, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(FVec3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(FVec3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(FVec3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(FVec3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FVec3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.obj3d.FVec3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.obj3d.FVec3)
  return target;
}

::size_t FVec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.obj3d.FVec3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FVec3::_class_data_ = {
    FVec3::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FVec3::GetClassData() const {
  return &_class_data_;
}

void FVec3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FVec3*>(&to_msg);
  auto& from = static_cast<const FVec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.obj3d.FVec3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FVec3::CopyFrom(const FVec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.obj3d.FVec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FVec3::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FVec3::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FVec3::InternalSwap(FVec3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FVec3, _impl_.z_)
      + sizeof(FVec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(FVec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata FVec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obj3d_2eproto_getter, &descriptor_table_obj3d_2eproto_once,
      file_level_metadata_obj3d_2eproto[1]);
}
// ===================================================================

class Face::_Internal {
 public:
  using HasBits = decltype(std::declval<Face>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Face, _impl_._has_bits_);
  static const ::protobuf::obj3d::IVec3& vertice_index(const Face* msg);
  static void set_has_vertice_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::obj3d::IVec3& normal_index(const Face* msg);
  static void set_has_normal_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::obj3d::IVec3& Face::_Internal::vertice_index(const Face* msg) {
  return *msg->_impl_.vertice_index_;
}
const ::protobuf::obj3d::IVec3& Face::_Internal::normal_index(const Face* msg) {
  return *msg->_impl_.normal_index_;
}
Face::Face(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.obj3d.Face)
}
inline PROTOBUF_NDEBUG_INLINE Face::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Face::Face(
    ::google::protobuf::Arena* arena,
    const Face& from)
    : ::google::protobuf::Message(arena) {
  Face* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vertice_index_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::obj3d::IVec3>(arena, *from._impl_.vertice_index_)
                : nullptr;
  _impl_.normal_index_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::obj3d::IVec3>(arena, *from._impl_.normal_index_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:protobuf.obj3d.Face)
}
inline PROTOBUF_NDEBUG_INLINE Face::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Face::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vertice_index_),
           0,
           offsetof(Impl_, normal_index_) -
               offsetof(Impl_, vertice_index_) +
               sizeof(Impl_::normal_index_));
}
Face::~Face() {
  // @@protoc_insertion_point(destructor:protobuf.obj3d.Face)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Face::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vertice_index_;
  delete _impl_.normal_index_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.obj3d.Face)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.vertice_index_ != nullptr);
      _impl_.vertice_index_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.normal_index_ != nullptr);
      _impl_.normal_index_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Face::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Face::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Face, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Face_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .protobuf.obj3d.IVec3 normal_index = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Face, _impl_.normal_index_)}},
    // .protobuf.obj3d.IVec3 vertice_index = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Face, _impl_.vertice_index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.obj3d.IVec3 vertice_index = 1;
    {PROTOBUF_FIELD_OFFSET(Face, _impl_.vertice_index_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.obj3d.IVec3 normal_index = 2;
    {PROTOBUF_FIELD_OFFSET(Face, _impl_.normal_index_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::obj3d::IVec3>()},
    {::_pbi::TcParser::GetTable<::protobuf::obj3d::IVec3>()},
  }}, {{
  }},
};

::uint8_t* Face::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.obj3d.Face)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.obj3d.IVec3 vertice_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::vertice_index(this),
        _Internal::vertice_index(this).GetCachedSize(), target, stream);
  }

  // .protobuf.obj3d.IVec3 normal_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::normal_index(this),
        _Internal::normal_index(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.obj3d.Face)
  return target;
}

::size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.obj3d.Face)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .protobuf.obj3d.IVec3 vertice_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vertice_index_);
    }

    // .protobuf.obj3d.IVec3 normal_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.normal_index_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Face::_class_data_ = {
    Face::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Face::GetClassData() const {
  return &_class_data_;
}

void Face::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Face*>(&to_msg);
  auto& from = static_cast<const Face&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.obj3d.Face)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_vertice_index()->::protobuf::obj3d::IVec3::MergeFrom(
          from._internal_vertice_index());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_normal_index()->::protobuf::obj3d::IVec3::MergeFrom(
          from._internal_normal_index());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.obj3d.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Face::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Face::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Face::InternalSwap(Face* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Face, _impl_.normal_index_)
      + sizeof(Face::_impl_.normal_index_)
      - PROTOBUF_FIELD_OFFSET(Face, _impl_.vertice_index_)>(
          reinterpret_cast<char*>(&_impl_.vertice_index_),
          reinterpret_cast<char*>(&other->_impl_.vertice_index_));
}

::google::protobuf::Metadata Face::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obj3d_2eproto_getter, &descriptor_table_obj3d_2eproto_once,
      file_level_metadata_obj3d_2eproto[2]);
}
// ===================================================================

class Obj3D::_Internal {
 public:
};

Obj3D::Obj3D(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.obj3d.Obj3D)
}
inline PROTOBUF_NDEBUG_INLINE Obj3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : vertices_{visibility, arena, from.vertices_},
        normals_{visibility, arena, from.normals_},
        faces_{visibility, arena, from.faces_},
        _cached_size_{0} {}

Obj3D::Obj3D(
    ::google::protobuf::Arena* arena,
    const Obj3D& from)
    : ::google::protobuf::Message(arena) {
  Obj3D* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:protobuf.obj3d.Obj3D)
}
inline PROTOBUF_NDEBUG_INLINE Obj3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : vertices_{visibility, arena},
        normals_{visibility, arena},
        faces_{visibility, arena},
        _cached_size_{0} {}

inline void Obj3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Obj3D::~Obj3D() {
  // @@protoc_insertion_point(destructor:protobuf.obj3d.Obj3D)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Obj3D::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Obj3D::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.obj3d.Obj3D)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.normals_.Clear();
  _impl_.faces_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Obj3D::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Obj3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Obj3D_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .protobuf.obj3d.FVec3 vertices = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Obj3D, _impl_.vertices_)}},
    // repeated .protobuf.obj3d.FVec3 normals = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Obj3D, _impl_.normals_)}},
    // repeated .protobuf.obj3d.Face faces = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Obj3D, _impl_.faces_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .protobuf.obj3d.FVec3 vertices = 1;
    {PROTOBUF_FIELD_OFFSET(Obj3D, _impl_.vertices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protobuf.obj3d.FVec3 normals = 2;
    {PROTOBUF_FIELD_OFFSET(Obj3D, _impl_.normals_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protobuf.obj3d.Face faces = 3;
    {PROTOBUF_FIELD_OFFSET(Obj3D, _impl_.faces_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::obj3d::FVec3>()},
    {::_pbi::TcParser::GetTable<::protobuf::obj3d::FVec3>()},
    {::_pbi::TcParser::GetTable<::protobuf::obj3d::Face>()},
  }}, {{
  }},
};

::uint8_t* Obj3D::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.obj3d.Obj3D)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .protobuf.obj3d.FVec3 vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf.obj3d.FVec3 normals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf.obj3d.Face faces = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_faces_size()); i < n; i++) {
    const auto& repfield = this->_internal_faces().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.obj3d.Obj3D)
  return target;
}

::size_t Obj3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.obj3d.Obj3D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.obj3d.FVec3 vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_internal_vertices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .protobuf.obj3d.FVec3 normals = 2;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_internal_normals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .protobuf.obj3d.Face faces = 3;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->_internal_faces()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Obj3D::_class_data_ = {
    Obj3D::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Obj3D::GetClassData() const {
  return &_class_data_;
}

void Obj3D::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Obj3D*>(&to_msg);
  auto& from = static_cast<const Obj3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.obj3d.Obj3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(
      from._internal_vertices());
  _this->_internal_mutable_normals()->MergeFrom(
      from._internal_normals());
  _this->_internal_mutable_faces()->MergeFrom(
      from._internal_faces());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Obj3D::CopyFrom(const Obj3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.obj3d.Obj3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Obj3D::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Obj3D::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Obj3D::InternalSwap(Obj3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
}

::google::protobuf::Metadata Obj3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obj3d_2eproto_getter, &descriptor_table_obj3d_2eproto_once,
      file_level_metadata_obj3d_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace obj3d
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

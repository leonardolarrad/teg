///  Copyright (c) 2024 Adrian & Leonardo Larrad.
///  
///  This software is provided 'as-is', without any express or implied warranty. 
///  In no event will the authors be held liable for any damages arising from
///  the use of this software.
///  
///  Permission is granted to anyone to use this software for any purpose,including
///  commercial applications, and to alter it and redistribute it freely, subject
///  to the following restrictions:
///  
///  1. The origin of this software must not be misrepresented; you must not claim
///     that you wrote the original software. If you use this software in a product, 
///     an acknowledgment in the product documentation would be appreciated but is 
///     not required.
///  2. Altered source versions must be plainly marked as such, and must not be
///     misrepresented as being the original software.
///  3. This notice may not be removed or altered from any source distribution.

#ifndef TEG_MEMBERS_VISITOR_H
#define TEG_MEMBERS_VISITOR_H

#include <concepts>
#include <type_traits>
#include <utility>
#include <tuple>

#include "def.h"
#include "core_concepts.h"
#include "members_count.h"

namespace teg::internal {

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 1>) {
    auto&& [_001] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 2>) {
    auto&& [_001, _002] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 3>) {
    auto&& [_001, _002, _003] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 4>) {
    auto&& [_001, _002, _003, _004] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 5>) {
    auto&& [_001, _002, _003, _004, _005] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 6>) {
    auto&& [_001, _002, _003, _004, _005, _006] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 7>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 8>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 9>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 10>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 11>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 12>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 13>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 14>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 15>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 16>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 17>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 18>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 19>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 20>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 21>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 22>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 23>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 24>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 25>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 26>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 27>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 28>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 29>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 30>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 31>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 32>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 33>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 34>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 35>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 36>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 37>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 38>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 39>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 40>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 41>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 42>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 43>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 44>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 45>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 46>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 47>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 48>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 49>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 50>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 51>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 52>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 53>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 54>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 55>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 56>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 57>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 58>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 59>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 60>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 61>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 62>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061, _062] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061, _062);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 63>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061, _062, _063] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061, _062, _063);
}

template <class F, class T>
constexpr inline decltype(auto) visit_members_impl(F&& f, T&& t, std::integral_constant<std::size_t, 64>) {
    auto&& [_001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061, _062, _063, _064] = std::forward<T>(t);
    
    return std::forward<F>(f)(
            _001, _002, _003, _004, _005, _006, _007, _008, _009, _010, _011, _012, _013, _014, _015, _016, _017, _018, _019, _020, 
            _021, _022, _023, _024, _025, _026, _027, _028, _029, _030, _031, _032, _033, _034, _035, _036, _037, _038, _039, _040, 
            _041, _042, _043, _044, _045, _046, _047, _048, _049, _050, _051, _052, _053, _054, _055, _056, _057, _058, _059, _060, 
            _061, _062, _063, _064);
}

}

namespace teg {

///  \brief The maximum number of members that can be visited using `visit_members`.
///  
constexpr static auto max_visit_members = 64;

namespace concepts {

///  \brief A type that can be bound to an identifier list using structured binding.
///  
///  Structured binding allows an object to be bound to a list of identifiers.
///  In other languagues, this mechanism is referred to as "destructuring" or
///  "unpacking".
///  
///  \example
///  \code
///     auto [a, b, c] = std::make_tuple(1, 2, 3);
///     a = 0;
///  \endcode
///  \see https://en.cppreference.com/w/cpp/language/structured_binding
///  
template <class T>
concept structure_bindable = 
           (aggregate<T> || tuple<T>)
        && (!aggregate<std::remove_cvref_t<T>> || members_count_v<std::remove_cvref_t<T>> <= max_visit_members)
        && (!tuple<std::remove_cvref_t<T>> || std::tuple_size_v<std::remove_cvref_t<T>> <= max_visit_members);

} // namespace concepts

///  \brief Invoke the callable object `f` with the members of `t` as arguments.
///  \param   f  A callable object.
///  \param   t  An object that can be bound to an identifier list using structured binding.
///  \return  The return value of `f(m1, m2, ..., mN)` where `m1, m2, ..., mN` are the members of `t`.
///  
///  \example
///  \code
///     struct S {
///         int a, b, c;
///     };
///     constexpr auto s = S{ 1, 2, 3 };
///     constexpr int r = visit_members(
///        [](auto&&... members) { return (members + ...); 
///     }, s);
///     static_assert(r == 6);
///  \endcode
///
///  \note It works similar to `std::apply` for tuple-like types.
///  \see https://en.cppreference.com/w/cpp/utility/apply
///  \see https://en.cppreference.com/w/cpp/language/structured_binding
///  
template<class F, class T> 
        requires (concepts::structure_bindable<std::remove_cvref_t<T>>)
TEG_INLINE constexpr decltype(auto) visit_members(F&& f, T&& t) noexcept {
    if constexpr (teg::concepts::tuple<std::remove_cvref_t<T>>) {
        return internal::visit_members_impl(
            std::forward<F>(f),
            std::forward<T>(t), 
            std::integral_constant<std::size_t, std::tuple_size_v<std::remove_cvref_t<T>>>{}   
        );
    }
    else {
        return internal::visit_members_impl(
            std::forward<F>(f),
            std::forward<T>(t), 
            std::integral_constant<std::size_t, members_count_v<std::remove_cvref_t<T>>>{}        
        );
    }
}

} // namespace teg

#endif // TEG_MEMBERS_VISITOR_H
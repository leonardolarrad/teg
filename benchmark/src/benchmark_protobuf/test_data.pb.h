// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_data.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_5fdata_2eproto;
namespace pb {
class EcommercePage;
struct EcommercePageDefaultTypeInternal;
extern EcommercePageDefaultTypeInternal _EcommercePage_default_instance_;
class EcommercePages;
struct EcommercePagesDefaultTypeInternal;
extern EcommercePagesDefaultTypeInternal _EcommercePages_default_instance_;
class EcommerceProduct;
struct EcommerceProductDefaultTypeInternal;
extern EcommerceProductDefaultTypeInternal _EcommerceProduct_default_instance_;
class EcommerceUser;
struct EcommerceUserDefaultTypeInternal;
extern EcommerceUserDefaultTypeInternal _EcommerceUser_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace pb {
enum EcommerceProductCategory : int {
  ELECTRONICS = 0,
  BOOKS = 1,
  CLOTHING = 2,
  HOME = 3,
  GARDEN = 4,
  TOYS = 5,
  FOOD = 6,
  BABY = 7,
  PETS = 8,
  HEALTH = 9,
  BEAUTY = 10,
  EcommerceProductCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EcommerceProductCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EcommerceProductCategory_IsValid(int value);
extern const uint32_t EcommerceProductCategory_internal_data_[];
constexpr EcommerceProductCategory EcommerceProductCategory_MIN = static_cast<EcommerceProductCategory>(0);
constexpr EcommerceProductCategory EcommerceProductCategory_MAX = static_cast<EcommerceProductCategory>(10);
constexpr int EcommerceProductCategory_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
EcommerceProductCategory_descriptor();
template <typename T>
const std::string& EcommerceProductCategory_Name(T value) {
  static_assert(std::is_same<T, EcommerceProductCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EcommerceProductCategory_Name().");
  return EcommerceProductCategory_Name(static_cast<EcommerceProductCategory>(value));
}
template <>
inline const std::string& EcommerceProductCategory_Name(EcommerceProductCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EcommerceProductCategory_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool EcommerceProductCategory_Parse(absl::string_view name, EcommerceProductCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EcommerceProductCategory>(
      EcommerceProductCategory_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class EcommerceUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EcommerceUser) */ {
 public:
  inline EcommerceUser() : EcommerceUser(nullptr) {}
  ~EcommerceUser() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EcommerceUser(::google::protobuf::internal::ConstantInitialized);

  inline EcommerceUser(const EcommerceUser& from)
      : EcommerceUser(nullptr, from) {}
  EcommerceUser(EcommerceUser&& from) noexcept
    : EcommerceUser() {
    *this = ::std::move(from);
  }

  inline EcommerceUser& operator=(const EcommerceUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcommerceUser& operator=(EcommerceUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcommerceUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcommerceUser* internal_default_instance() {
    return reinterpret_cast<const EcommerceUser*>(
               &_EcommerceUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EcommerceUser& a, EcommerceUser& b) {
    a.Swap(&b);
  }
  inline void Swap(EcommerceUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcommerceUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcommerceUser* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcommerceUser>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EcommerceUser& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EcommerceUser& from) {
    EcommerceUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EcommerceUser* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.EcommerceUser";
  }
  protected:
  explicit EcommerceUser(::google::protobuf::Arena* arena);
  EcommerceUser(::google::protobuf::Arena* arena, const EcommerceUser& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentSearchesFieldNumber = 4,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kUuidFieldNumber = 1,
  };
  // repeated string recent_searches = 4;
  int recent_searches_size() const;
  private:
  int _internal_recent_searches_size() const;

  public:
  void clear_recent_searches() ;
  const std::string& recent_searches(int index) const;
  std::string* mutable_recent_searches(int index);
  void set_recent_searches(int index, const std::string& value);
  void set_recent_searches(int index, std::string&& value);
  void set_recent_searches(int index, const char* value);
  void set_recent_searches(int index, const char* value, std::size_t size);
  void set_recent_searches(int index, absl::string_view value);
  std::string* add_recent_searches();
  void add_recent_searches(const std::string& value);
  void add_recent_searches(std::string&& value);
  void add_recent_searches(const char* value);
  void add_recent_searches(const char* value, std::size_t size);
  void add_recent_searches(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& recent_searches() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_recent_searches();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_recent_searches() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_recent_searches();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // uint64 uuid = 1;
  void clear_uuid() ;
  ::uint64_t uuid() const;
  void set_uuid(::uint64_t value);

  private:
  ::uint64_t _internal_uuid() const;
  void _internal_set_uuid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb.EcommerceUser)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> recent_searches_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::uint64_t uuid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fdata_2eproto;
};// -------------------------------------------------------------------

class EcommerceProduct final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EcommerceProduct) */ {
 public:
  inline EcommerceProduct() : EcommerceProduct(nullptr) {}
  ~EcommerceProduct() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EcommerceProduct(::google::protobuf::internal::ConstantInitialized);

  inline EcommerceProduct(const EcommerceProduct& from)
      : EcommerceProduct(nullptr, from) {}
  EcommerceProduct(EcommerceProduct&& from) noexcept
    : EcommerceProduct() {
    *this = ::std::move(from);
  }

  inline EcommerceProduct& operator=(const EcommerceProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcommerceProduct& operator=(EcommerceProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcommerceProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcommerceProduct* internal_default_instance() {
    return reinterpret_cast<const EcommerceProduct*>(
               &_EcommerceProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EcommerceProduct& a, EcommerceProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(EcommerceProduct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcommerceProduct* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcommerceProduct* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcommerceProduct>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EcommerceProduct& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EcommerceProduct& from) {
    EcommerceProduct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EcommerceProduct* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.EcommerceProduct";
  }
  protected:
  explicit EcommerceProduct(::google::protobuf::Arena* arena);
  EcommerceProduct(::google::protobuf::Arena* arena, const EcommerceProduct& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kImageLoResUrlFieldNumber = 6,
    kImageHiResUrlFieldNumber = 7,
    kUuidFieldNumber = 1,
    kCategoryFieldNumber = 4,
    kStockFieldNumber = 10,
    kPriceFieldNumber = 8,
    kDiscountFieldNumber = 9,
    kRatingFieldNumber = 11,
    kReviewsFieldNumber = 12,
  };
  // repeated string tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, std::size_t size);
  void set_tags(int index, absl::string_view value);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, std::size_t size);
  void add_tags(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string image_lo_res_url = 6;
  void clear_image_lo_res_url() ;
  const std::string& image_lo_res_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_lo_res_url(Arg_&& arg, Args_... args);
  std::string* mutable_image_lo_res_url();
  PROTOBUF_NODISCARD std::string* release_image_lo_res_url();
  void set_allocated_image_lo_res_url(std::string* value);

  private:
  const std::string& _internal_image_lo_res_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_lo_res_url(
      const std::string& value);
  std::string* _internal_mutable_image_lo_res_url();

  public:
  // string image_hi_res_url = 7;
  void clear_image_hi_res_url() ;
  const std::string& image_hi_res_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_hi_res_url(Arg_&& arg, Args_... args);
  std::string* mutable_image_hi_res_url();
  PROTOBUF_NODISCARD std::string* release_image_hi_res_url();
  void set_allocated_image_hi_res_url(std::string* value);

  private:
  const std::string& _internal_image_hi_res_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_hi_res_url(
      const std::string& value);
  std::string* _internal_mutable_image_hi_res_url();

  public:
  // uint64 uuid = 1;
  void clear_uuid() ;
  ::uint64_t uuid() const;
  void set_uuid(::uint64_t value);

  private:
  ::uint64_t _internal_uuid() const;
  void _internal_set_uuid(::uint64_t value);

  public:
  // .pb.EcommerceProductCategory category = 4;
  void clear_category() ;
  ::pb::EcommerceProductCategory category() const;
  void set_category(::pb::EcommerceProductCategory value);

  private:
  ::pb::EcommerceProductCategory _internal_category() const;
  void _internal_set_category(::pb::EcommerceProductCategory value);

  public:
  // uint32 stock = 10;
  void clear_stock() ;
  ::uint32_t stock() const;
  void set_stock(::uint32_t value);

  private:
  ::uint32_t _internal_stock() const;
  void _internal_set_stock(::uint32_t value);

  public:
  // double price = 8;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double discount = 9;
  void clear_discount() ;
  double discount() const;
  void set_discount(double value);

  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);

  public:
  // uint32 rating = 11;
  void clear_rating() ;
  ::uint32_t rating() const;
  void set_rating(::uint32_t value);

  private:
  ::uint32_t _internal_rating() const;
  void _internal_set_rating(::uint32_t value);

  public:
  // uint32 reviews = 12;
  void clear_reviews() ;
  ::uint32_t reviews() const;
  void set_reviews(::uint32_t value);

  private:
  ::uint32_t _internal_reviews() const;
  void _internal_set_reviews(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb.EcommerceProduct)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      87, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr image_lo_res_url_;
    ::google::protobuf::internal::ArenaStringPtr image_hi_res_url_;
    ::uint64_t uuid_;
    int category_;
    ::uint32_t stock_;
    double price_;
    double discount_;
    ::uint32_t rating_;
    ::uint32_t reviews_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fdata_2eproto;
};// -------------------------------------------------------------------

class EcommercePage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EcommercePage) */ {
 public:
  inline EcommercePage() : EcommercePage(nullptr) {}
  ~EcommercePage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EcommercePage(::google::protobuf::internal::ConstantInitialized);

  inline EcommercePage(const EcommercePage& from)
      : EcommercePage(nullptr, from) {}
  EcommercePage(EcommercePage&& from) noexcept
    : EcommercePage() {
    *this = ::std::move(from);
  }

  inline EcommercePage& operator=(const EcommercePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcommercePage& operator=(EcommercePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcommercePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcommercePage* internal_default_instance() {
    return reinterpret_cast<const EcommercePage*>(
               &_EcommercePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EcommercePage& a, EcommercePage& b) {
    a.Swap(&b);
  }
  inline void Swap(EcommercePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcommercePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcommercePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcommercePage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EcommercePage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EcommercePage& from) {
    EcommercePage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EcommercePage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.EcommercePage";
  }
  protected:
  explicit EcommercePage(::google::protobuf::Arena* arena);
  EcommercePage(::google::protobuf::Arena* arena, const EcommercePage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 8,
    kPermanentUrlFieldNumber = 2,
    kQueryFieldNumber = 3,
    kUserFieldNumber = 1,
    kPageFieldNumber = 4,
    kTotalPagesFieldNumber = 5,
    kResultsPerPageFieldNumber = 6,
    kTotalResultsFieldNumber = 7,
  };
  // repeated .pb.EcommerceProduct products = 8;
  int products_size() const;
  private:
  int _internal_products_size() const;

  public:
  void clear_products() ;
  ::pb::EcommerceProduct* mutable_products(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::EcommerceProduct >*
      mutable_products();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb::EcommerceProduct>& _internal_products() const;
  ::google::protobuf::RepeatedPtrField<::pb::EcommerceProduct>* _internal_mutable_products();
  public:
  const ::pb::EcommerceProduct& products(int index) const;
  ::pb::EcommerceProduct* add_products();
  const ::google::protobuf::RepeatedPtrField< ::pb::EcommerceProduct >&
      products() const;
  // string permanent_url = 2;
  void clear_permanent_url() ;
  const std::string& permanent_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_permanent_url(Arg_&& arg, Args_... args);
  std::string* mutable_permanent_url();
  PROTOBUF_NODISCARD std::string* release_permanent_url();
  void set_allocated_permanent_url(std::string* value);

  private:
  const std::string& _internal_permanent_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permanent_url(
      const std::string& value);
  std::string* _internal_mutable_permanent_url();

  public:
  // string query = 3;
  void clear_query() ;
  const std::string& query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* value);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // .pb.EcommerceUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::pb::EcommerceUser& user() const;
  PROTOBUF_NODISCARD ::pb::EcommerceUser* release_user();
  ::pb::EcommerceUser* mutable_user();
  void set_allocated_user(::pb::EcommerceUser* value);
  void unsafe_arena_set_allocated_user(::pb::EcommerceUser* value);
  ::pb::EcommerceUser* unsafe_arena_release_user();

  private:
  const ::pb::EcommerceUser& _internal_user() const;
  ::pb::EcommerceUser* _internal_mutable_user();

  public:
  // uint32 page = 4;
  void clear_page() ;
  ::uint32_t page() const;
  void set_page(::uint32_t value);

  private:
  ::uint32_t _internal_page() const;
  void _internal_set_page(::uint32_t value);

  public:
  // uint32 total_pages = 5;
  void clear_total_pages() ;
  ::uint32_t total_pages() const;
  void set_total_pages(::uint32_t value);

  private:
  ::uint32_t _internal_total_pages() const;
  void _internal_set_total_pages(::uint32_t value);

  public:
  // uint32 results_per_page = 6;
  void clear_results_per_page() ;
  ::uint32_t results_per_page() const;
  void set_results_per_page(::uint32_t value);

  private:
  ::uint32_t _internal_results_per_page() const;
  void _internal_set_results_per_page(::uint32_t value);

  public:
  // uint32 total_results = 7;
  void clear_total_results() ;
  ::uint32_t total_results() const;
  void set_total_results(::uint32_t value);

  private:
  ::uint32_t _internal_total_results() const;
  void _internal_set_total_results(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb.EcommercePage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::pb::EcommerceProduct > products_;
    ::google::protobuf::internal::ArenaStringPtr permanent_url_;
    ::google::protobuf::internal::ArenaStringPtr query_;
    ::pb::EcommerceUser* user_;
    ::uint32_t page_;
    ::uint32_t total_pages_;
    ::uint32_t results_per_page_;
    ::uint32_t total_results_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fdata_2eproto;
};// -------------------------------------------------------------------

class EcommercePages final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EcommercePages) */ {
 public:
  inline EcommercePages() : EcommercePages(nullptr) {}
  ~EcommercePages() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EcommercePages(::google::protobuf::internal::ConstantInitialized);

  inline EcommercePages(const EcommercePages& from)
      : EcommercePages(nullptr, from) {}
  EcommercePages(EcommercePages&& from) noexcept
    : EcommercePages() {
    *this = ::std::move(from);
  }

  inline EcommercePages& operator=(const EcommercePages& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcommercePages& operator=(EcommercePages&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcommercePages& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcommercePages* internal_default_instance() {
    return reinterpret_cast<const EcommercePages*>(
               &_EcommercePages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EcommercePages& a, EcommercePages& b) {
    a.Swap(&b);
  }
  inline void Swap(EcommercePages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcommercePages* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcommercePages* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcommercePages>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EcommercePages& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EcommercePages& from) {
    EcommercePages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EcommercePages* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.EcommercePages";
  }
  protected:
  explicit EcommercePages(::google::protobuf::Arena* arena);
  EcommercePages(::google::protobuf::Arena* arena, const EcommercePages& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 1,
  };
  // repeated .pb.EcommercePage pages = 1;
  int pages_size() const;
  private:
  int _internal_pages_size() const;

  public:
  void clear_pages() ;
  ::pb::EcommercePage* mutable_pages(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::EcommercePage >*
      mutable_pages();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb::EcommercePage>& _internal_pages() const;
  ::google::protobuf::RepeatedPtrField<::pb::EcommercePage>* _internal_mutable_pages();
  public:
  const ::pb::EcommercePage& pages(int index) const;
  ::pb::EcommercePage* add_pages();
  const ::google::protobuf::RepeatedPtrField< ::pb::EcommercePage >&
      pages() const;
  // @@protoc_insertion_point(class_scope:pb.EcommercePages)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::pb::EcommercePage > pages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EcommerceUser

// uint64 uuid = 1;
inline void EcommerceUser::clear_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_ = ::uint64_t{0u};
}
inline ::uint64_t EcommerceUser::uuid() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceUser.uuid)
  return _internal_uuid();
}
inline void EcommerceUser::set_uuid(::uint64_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceUser.uuid)
}
inline ::uint64_t EcommerceUser::_internal_uuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uuid_;
}
inline void EcommerceUser::_internal_set_uuid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_ = value;
}

// string name = 2;
inline void EcommerceUser::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EcommerceUser::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceUser.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommerceUser::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommerceUser.name)
}
inline std::string* EcommerceUser::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.EcommerceUser.name)
  return _s;
}
inline const std::string& EcommerceUser::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void EcommerceUser::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* EcommerceUser::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* EcommerceUser::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommerceUser.name)
  return _impl_.name_.Release();
}
inline void EcommerceUser::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommerceUser.name)
}

// string email = 3;
inline void EcommerceUser::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EcommerceUser::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceUser.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommerceUser::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommerceUser.email)
}
inline std::string* EcommerceUser::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:pb.EcommerceUser.email)
  return _s;
}
inline const std::string& EcommerceUser::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void EcommerceUser::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* EcommerceUser::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* EcommerceUser::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommerceUser.email)
  return _impl_.email_.Release();
}
inline void EcommerceUser::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommerceUser.email)
}

// repeated string recent_searches = 4;
inline int EcommerceUser::_internal_recent_searches_size() const {
  return _internal_recent_searches().size();
}
inline int EcommerceUser::recent_searches_size() const {
  return _internal_recent_searches_size();
}
inline void EcommerceUser::clear_recent_searches() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recent_searches_.Clear();
}
inline std::string* EcommerceUser::add_recent_searches()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_recent_searches()->Add();
  // @@protoc_insertion_point(field_add_mutable:pb.EcommerceUser.recent_searches)
  return _s;
}
inline const std::string& EcommerceUser::recent_searches(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceUser.recent_searches)
  return _internal_recent_searches().Get(index);
}
inline std::string* EcommerceUser::mutable_recent_searches(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:pb.EcommerceUser.recent_searches)
  return _internal_mutable_recent_searches()->Mutable(index);
}
inline void EcommerceUser::set_recent_searches(int index, const std::string& value) {
  _internal_mutable_recent_searches()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::set_recent_searches(int index, std::string&& value) {
  _internal_mutable_recent_searches()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::set_recent_searches(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_recent_searches()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::set_recent_searches(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_recent_searches()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::set_recent_searches(int index, absl::string_view value) {
  _internal_mutable_recent_searches()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::add_recent_searches(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_recent_searches()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::add_recent_searches(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_recent_searches()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::add_recent_searches(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_recent_searches()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::add_recent_searches(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_recent_searches()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.EcommerceUser.recent_searches)
}
inline void EcommerceUser::add_recent_searches(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_recent_searches()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:pb.EcommerceUser.recent_searches)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EcommerceUser::recent_searches() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:pb.EcommerceUser.recent_searches)
  return _internal_recent_searches();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EcommerceUser::mutable_recent_searches() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:pb.EcommerceUser.recent_searches)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_recent_searches();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EcommerceUser::_internal_recent_searches() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recent_searches_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EcommerceUser::_internal_mutable_recent_searches() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.recent_searches_;
}

// -------------------------------------------------------------------

// EcommerceProduct

// uint64 uuid = 1;
inline void EcommerceProduct::clear_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_ = ::uint64_t{0u};
}
inline ::uint64_t EcommerceProduct::uuid() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.uuid)
  return _internal_uuid();
}
inline void EcommerceProduct::set_uuid(::uint64_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.uuid)
}
inline ::uint64_t EcommerceProduct::_internal_uuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uuid_;
}
inline void EcommerceProduct::_internal_set_uuid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_ = value;
}

// string name = 2;
inline void EcommerceProduct::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EcommerceProduct::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommerceProduct::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.name)
}
inline std::string* EcommerceProduct::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.EcommerceProduct.name)
  return _s;
}
inline const std::string& EcommerceProduct::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void EcommerceProduct::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* EcommerceProduct::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* EcommerceProduct::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommerceProduct.name)
  return _impl_.name_.Release();
}
inline void EcommerceProduct::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommerceProduct.name)
}

// string description = 3;
inline void EcommerceProduct::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& EcommerceProduct::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommerceProduct::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.description)
}
inline std::string* EcommerceProduct::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pb.EcommerceProduct.description)
  return _s;
}
inline const std::string& EcommerceProduct::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void EcommerceProduct::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* EcommerceProduct::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* EcommerceProduct::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommerceProduct.description)
  return _impl_.description_.Release();
}
inline void EcommerceProduct::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommerceProduct.description)
}

// .pb.EcommerceProductCategory category = 4;
inline void EcommerceProduct::clear_category() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.category_ = 0;
}
inline ::pb::EcommerceProductCategory EcommerceProduct::category() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.category)
  return _internal_category();
}
inline void EcommerceProduct::set_category(::pb::EcommerceProductCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.category)
}
inline ::pb::EcommerceProductCategory EcommerceProduct::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::pb::EcommerceProductCategory>(_impl_.category_);
}
inline void EcommerceProduct::_internal_set_category(::pb::EcommerceProductCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// repeated string tags = 5;
inline int EcommerceProduct::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int EcommerceProduct::tags_size() const {
  return _internal_tags_size();
}
inline void EcommerceProduct::clear_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tags_.Clear();
}
inline std::string* EcommerceProduct::add_tags()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:pb.EcommerceProduct.tags)
  return _s;
}
inline const std::string& EcommerceProduct::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.tags)
  return _internal_tags().Get(index);
}
inline std::string* EcommerceProduct::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:pb.EcommerceProduct.tags)
  return _internal_mutable_tags()->Mutable(index);
}
inline void EcommerceProduct::set_tags(int index, const std::string& value) {
  _internal_mutable_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::set_tags(int index, std::string&& value) {
  _internal_mutable_tags()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::set_tags(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::set_tags(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_tags()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::set_tags(int index, absl::string_view value) {
  _internal_mutable_tags()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::add_tags(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::add_tags(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::add_tags(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::add_tags(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.EcommerceProduct.tags)
}
inline void EcommerceProduct::add_tags(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tags()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:pb.EcommerceProduct.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EcommerceProduct::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:pb.EcommerceProduct.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EcommerceProduct::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:pb.EcommerceProduct.tags)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EcommerceProduct::_internal_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EcommerceProduct::_internal_mutable_tags() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tags_;
}

// string image_lo_res_url = 6;
inline void EcommerceProduct::clear_image_lo_res_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_lo_res_url_.ClearToEmpty();
}
inline const std::string& EcommerceProduct::image_lo_res_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.image_lo_res_url)
  return _internal_image_lo_res_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommerceProduct::set_image_lo_res_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_lo_res_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.image_lo_res_url)
}
inline std::string* EcommerceProduct::mutable_image_lo_res_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_lo_res_url();
  // @@protoc_insertion_point(field_mutable:pb.EcommerceProduct.image_lo_res_url)
  return _s;
}
inline const std::string& EcommerceProduct::_internal_image_lo_res_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_lo_res_url_.Get();
}
inline void EcommerceProduct::_internal_set_image_lo_res_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_lo_res_url_.Set(value, GetArena());
}
inline std::string* EcommerceProduct::_internal_mutable_image_lo_res_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_lo_res_url_.Mutable( GetArena());
}
inline std::string* EcommerceProduct::release_image_lo_res_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommerceProduct.image_lo_res_url)
  return _impl_.image_lo_res_url_.Release();
}
inline void EcommerceProduct::set_allocated_image_lo_res_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_lo_res_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_lo_res_url_.IsDefault()) {
          _impl_.image_lo_res_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommerceProduct.image_lo_res_url)
}

// string image_hi_res_url = 7;
inline void EcommerceProduct::clear_image_hi_res_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_hi_res_url_.ClearToEmpty();
}
inline const std::string& EcommerceProduct::image_hi_res_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.image_hi_res_url)
  return _internal_image_hi_res_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommerceProduct::set_image_hi_res_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_hi_res_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.image_hi_res_url)
}
inline std::string* EcommerceProduct::mutable_image_hi_res_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_hi_res_url();
  // @@protoc_insertion_point(field_mutable:pb.EcommerceProduct.image_hi_res_url)
  return _s;
}
inline const std::string& EcommerceProduct::_internal_image_hi_res_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_hi_res_url_.Get();
}
inline void EcommerceProduct::_internal_set_image_hi_res_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_hi_res_url_.Set(value, GetArena());
}
inline std::string* EcommerceProduct::_internal_mutable_image_hi_res_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_hi_res_url_.Mutable( GetArena());
}
inline std::string* EcommerceProduct::release_image_hi_res_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommerceProduct.image_hi_res_url)
  return _impl_.image_hi_res_url_.Release();
}
inline void EcommerceProduct::set_allocated_image_hi_res_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_hi_res_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_hi_res_url_.IsDefault()) {
          _impl_.image_hi_res_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommerceProduct.image_hi_res_url)
}

// double price = 8;
inline void EcommerceProduct::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_ = 0;
}
inline double EcommerceProduct::price() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.price)
  return _internal_price();
}
inline void EcommerceProduct::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.price)
}
inline double EcommerceProduct::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_;
}
inline void EcommerceProduct::_internal_set_price(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_ = value;
}

// double discount = 9;
inline void EcommerceProduct::clear_discount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.discount_ = 0;
}
inline double EcommerceProduct::discount() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.discount)
  return _internal_discount();
}
inline void EcommerceProduct::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.discount)
}
inline double EcommerceProduct::_internal_discount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.discount_;
}
inline void EcommerceProduct::_internal_set_discount(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.discount_ = value;
}

// uint32 stock = 10;
inline void EcommerceProduct::clear_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_ = 0u;
}
inline ::uint32_t EcommerceProduct::stock() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.stock)
  return _internal_stock();
}
inline void EcommerceProduct::set_stock(::uint32_t value) {
  _internal_set_stock(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.stock)
}
inline ::uint32_t EcommerceProduct::_internal_stock() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stock_;
}
inline void EcommerceProduct::_internal_set_stock(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_ = value;
}

// uint32 rating = 11;
inline void EcommerceProduct::clear_rating() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rating_ = 0u;
}
inline ::uint32_t EcommerceProduct::rating() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.rating)
  return _internal_rating();
}
inline void EcommerceProduct::set_rating(::uint32_t value) {
  _internal_set_rating(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.rating)
}
inline ::uint32_t EcommerceProduct::_internal_rating() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rating_;
}
inline void EcommerceProduct::_internal_set_rating(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rating_ = value;
}

// uint32 reviews = 12;
inline void EcommerceProduct::clear_reviews() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reviews_ = 0u;
}
inline ::uint32_t EcommerceProduct::reviews() const {
  // @@protoc_insertion_point(field_get:pb.EcommerceProduct.reviews)
  return _internal_reviews();
}
inline void EcommerceProduct::set_reviews(::uint32_t value) {
  _internal_set_reviews(value);
  // @@protoc_insertion_point(field_set:pb.EcommerceProduct.reviews)
}
inline ::uint32_t EcommerceProduct::_internal_reviews() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reviews_;
}
inline void EcommerceProduct::_internal_set_reviews(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reviews_ = value;
}

// -------------------------------------------------------------------

// EcommercePage

// .pb.EcommerceUser user = 1;
inline bool EcommercePage::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void EcommercePage::clear_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::EcommerceUser& EcommercePage::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb::EcommerceUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::EcommerceUser&>(::pb::_EcommerceUser_default_instance_);
}
inline const ::pb::EcommerceUser& EcommercePage::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.user)
  return _internal_user();
}
inline void EcommercePage::unsafe_arena_set_allocated_user(::pb::EcommerceUser* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::pb::EcommerceUser*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.EcommercePage.user)
}
inline ::pb::EcommerceUser* EcommercePage::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb::EcommerceUser* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb::EcommerceUser* EcommercePage::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommercePage.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb::EcommerceUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::pb::EcommerceUser* EcommercePage::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::EcommerceUser>(GetArena());
    _impl_.user_ = reinterpret_cast<::pb::EcommerceUser*>(p);
  }
  return _impl_.user_;
}
inline ::pb::EcommerceUser* EcommercePage::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::pb::EcommerceUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:pb.EcommercePage.user)
  return _msg;
}
inline void EcommercePage::set_allocated_user(::pb::EcommerceUser* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::pb::EcommerceUser*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::pb::EcommerceUser*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::pb::EcommerceUser*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb.EcommercePage.user)
}

// string permanent_url = 2;
inline void EcommercePage::clear_permanent_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.permanent_url_.ClearToEmpty();
}
inline const std::string& EcommercePage::permanent_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.permanent_url)
  return _internal_permanent_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommercePage::set_permanent_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.permanent_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommercePage.permanent_url)
}
inline std::string* EcommercePage::mutable_permanent_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_permanent_url();
  // @@protoc_insertion_point(field_mutable:pb.EcommercePage.permanent_url)
  return _s;
}
inline const std::string& EcommercePage::_internal_permanent_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.permanent_url_.Get();
}
inline void EcommercePage::_internal_set_permanent_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.permanent_url_.Set(value, GetArena());
}
inline std::string* EcommercePage::_internal_mutable_permanent_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.permanent_url_.Mutable( GetArena());
}
inline std::string* EcommercePage::release_permanent_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommercePage.permanent_url)
  return _impl_.permanent_url_.Release();
}
inline void EcommercePage::set_allocated_permanent_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.permanent_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.permanent_url_.IsDefault()) {
          _impl_.permanent_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommercePage.permanent_url)
}

// string query = 3;
inline void EcommercePage::clear_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.ClearToEmpty();
}
inline const std::string& EcommercePage::query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcommercePage::set_query(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.EcommercePage.query)
}
inline std::string* EcommercePage::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:pb.EcommercePage.query)
  return _s;
}
inline const std::string& EcommercePage::_internal_query() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.query_.Get();
}
inline void EcommercePage::_internal_set_query(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(value, GetArena());
}
inline std::string* EcommercePage::_internal_mutable_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.query_.Mutable( GetArena());
}
inline std::string* EcommercePage::release_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.EcommercePage.query)
  return _impl_.query_.Release();
}
inline void EcommercePage::set_allocated_query(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_.IsDefault()) {
          _impl_.query_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.EcommercePage.query)
}

// uint32 page = 4;
inline void EcommercePage::clear_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_ = 0u;
}
inline ::uint32_t EcommercePage::page() const {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.page)
  return _internal_page();
}
inline void EcommercePage::set_page(::uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:pb.EcommercePage.page)
}
inline ::uint32_t EcommercePage::_internal_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_;
}
inline void EcommercePage::_internal_set_page(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_ = value;
}

// uint32 total_pages = 5;
inline void EcommercePage::clear_total_pages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_pages_ = 0u;
}
inline ::uint32_t EcommercePage::total_pages() const {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.total_pages)
  return _internal_total_pages();
}
inline void EcommercePage::set_total_pages(::uint32_t value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:pb.EcommercePage.total_pages)
}
inline ::uint32_t EcommercePage::_internal_total_pages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_pages_;
}
inline void EcommercePage::_internal_set_total_pages(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_pages_ = value;
}

// uint32 results_per_page = 6;
inline void EcommercePage::clear_results_per_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.results_per_page_ = 0u;
}
inline ::uint32_t EcommercePage::results_per_page() const {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.results_per_page)
  return _internal_results_per_page();
}
inline void EcommercePage::set_results_per_page(::uint32_t value) {
  _internal_set_results_per_page(value);
  // @@protoc_insertion_point(field_set:pb.EcommercePage.results_per_page)
}
inline ::uint32_t EcommercePage::_internal_results_per_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.results_per_page_;
}
inline void EcommercePage::_internal_set_results_per_page(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.results_per_page_ = value;
}

// uint32 total_results = 7;
inline void EcommercePage::clear_total_results() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_results_ = 0u;
}
inline ::uint32_t EcommercePage::total_results() const {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.total_results)
  return _internal_total_results();
}
inline void EcommercePage::set_total_results(::uint32_t value) {
  _internal_set_total_results(value);
  // @@protoc_insertion_point(field_set:pb.EcommercePage.total_results)
}
inline ::uint32_t EcommercePage::_internal_total_results() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_results_;
}
inline void EcommercePage::_internal_set_total_results(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_results_ = value;
}

// repeated .pb.EcommerceProduct products = 8;
inline int EcommercePage::_internal_products_size() const {
  return _internal_products().size();
}
inline int EcommercePage::products_size() const {
  return _internal_products_size();
}
inline void EcommercePage::clear_products() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.products_.Clear();
}
inline ::pb::EcommerceProduct* EcommercePage::mutable_products(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:pb.EcommercePage.products)
  return _internal_mutable_products()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::pb::EcommerceProduct>* EcommercePage::mutable_products()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:pb.EcommercePage.products)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_products();
}
inline const ::pb::EcommerceProduct& EcommercePage::products(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommercePage.products)
  return _internal_products().Get(index);
}
inline ::pb::EcommerceProduct* EcommercePage::add_products() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb::EcommerceProduct* _add = _internal_mutable_products()->Add();
  // @@protoc_insertion_point(field_add:pb.EcommercePage.products)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::pb::EcommerceProduct>& EcommercePage::products() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:pb.EcommercePage.products)
  return _internal_products();
}
inline const ::google::protobuf::RepeatedPtrField<::pb::EcommerceProduct>&
EcommercePage::_internal_products() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.products_;
}
inline ::google::protobuf::RepeatedPtrField<::pb::EcommerceProduct>*
EcommercePage::_internal_mutable_products() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.products_;
}

// -------------------------------------------------------------------

// EcommercePages

// repeated .pb.EcommercePage pages = 1;
inline int EcommercePages::_internal_pages_size() const {
  return _internal_pages().size();
}
inline int EcommercePages::pages_size() const {
  return _internal_pages_size();
}
inline void EcommercePages::clear_pages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pages_.Clear();
}
inline ::pb::EcommercePage* EcommercePages::mutable_pages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:pb.EcommercePages.pages)
  return _internal_mutable_pages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::pb::EcommercePage>* EcommercePages::mutable_pages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:pb.EcommercePages.pages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pages();
}
inline const ::pb::EcommercePage& EcommercePages::pages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.EcommercePages.pages)
  return _internal_pages().Get(index);
}
inline ::pb::EcommercePage* EcommercePages::add_pages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb::EcommercePage* _add = _internal_mutable_pages()->Add();
  // @@protoc_insertion_point(field_add:pb.EcommercePages.pages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::pb::EcommercePage>& EcommercePages::pages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:pb.EcommercePages.pages)
  return _internal_pages();
}
inline const ::google::protobuf::RepeatedPtrField<::pb::EcommercePage>&
EcommercePages::_internal_pages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pages_;
}
inline ::google::protobuf::RepeatedPtrField<::pb::EcommercePage>*
EcommercePages::_internal_mutable_pages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::pb::EcommerceProductCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pb::EcommerceProductCategory>() {
  return ::pb::EcommerceProductCategory_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto_2epb_2eh
